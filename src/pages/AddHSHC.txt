import React, { useState } from 'react';
import * as XLSX from 'xlsx';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import authUtils from '../utils/authUtils';

const HSHCForm = () => {
    const [excelFiles, setExcelFiles] = useState([]);
    const [hsHcData, setHsHcData] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [fileInfo, setFileInfo] = useState({
        files: [],
        fileTypes: [],
        pops: [],
        maKeHoachList: []
    });

    const detectFileType = (workbook) => {
        // Đọc sheet Bìa để xác định loại file
        const sheetBia = workbook.Sheets['Bìa'] || workbook.Sheets['BIA'] || workbook.Sheets['bia'];
        
        if (!sheetBia) {
            return 'HCM'; // Mặc định nếu không tìm thấy sheet Bìa
        }
        
        // Kiểm tra các ô F27-F29 để xác định loại file
        const f27 = sheetBia?.['F27']?.v || '';
        const f28 = sheetBia?.['F28']?.v || '';
        const f29 = sheetBia?.['F29']?.v || '';
        
        // Chuyển text về dạng chữ thường để dễ so sánh
        const combinedText = (f27 + f28 + f29).toLowerCase();
        
        if (combinedText.includes('hcm')) return 'HCM';
        if (combinedText.includes('dni')) return 'DNI';
        if (combinedText.includes('bdg')) return 'BDG';
        if (combinedText.includes('bpc')) return 'BPC';
        
        return 'HCM'; // Mặc định nếu không xác định được
    };

    const getFileConfig = (fileType) => {
        // Cấu hình vị trí ô cho từng loại file
        switch (fileType) {
            case 'DNI':
                return {
                    popCells: ['C18', 'D18', 'E18'],
                    maKeHoachCells: ['C19', 'D19', 'E19'],
                    hangMucRange: { start: 19, end: 36, col: 'A' },
                    soLuongColumns: ['C', 'D', 'E'],
                    donGiaCol: 'G',
                    sheetName: 'QT'
                };
            case 'BDG':
                return {
                    popCells: ['C17', 'D17', 'E17'],
                    maKeHoachCells: ['C18', 'D18', 'E18'],
                    hangMucRange: { start: 19, end: 35, col: 'A' },
                    soLuongColumns: ['C', 'D', 'E'],
                    donGiaCol: 'G',
                    sheetName: 'QT'
                };
            case 'BPC':
                return {
                    popCells: ['C17', 'D17', 'E17'],
                    maKeHoachCells: ['C18', 'D18', 'E18'],
                    hangMucRange: { start: 19, end: 53, col: 'A' },
                    soLuongColumns: ['C', 'D', 'E'],
                    donGiaCol: 'G',
                    sheetName: 'QT'
                };
            case 'HCM':
            default:
                return {
                    popCells: ['C17', 'D17', 'E17'],
                    maKeHoachCells: ['C18', 'D18', 'E18'],
                    hangMucRange: { start: 19, end: 53, col: 'A' },
                    soLuongColumns: ['C', 'D', 'E'],
                    donGiaCol: 'G',
                    sheetName: 'QT'
                };
        }
    };

    const readExcelFile = (e) => {
        const files = Array.from(e.target.files);

        if (!files || files.length === 0) {
            return;
        }

        setExcelFiles(files);
        setIsLoading(true);
        const toastId = toast.loading(`Đang đọc ${files.length} file Excel...`);

        const processedData = [];
        const fileInfos = {
            files: [],
            fileTypes: [],
            pops: [],
            maKeHoachList: []
        };
        
        let completedFiles = 0;
        
        files.forEach((file) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });

                    // Xác định loại file
                    const fileType = detectFileType(workbook);
                    const config = getFileConfig(fileType);

                    // Đọc sheet QT để lấy thông tin
                    const sheet = workbook.Sheets[config.sheetName];
                    
                    if (!sheet) {
                        throw new Error(`Không tìm thấy sheet ${config.sheetName} trong file ${file.name}`);
                    }

                    // Lấy danh sách mã kế hoạch và POP từ vị trí tương ứng
                    const maKeHoachArr = config.maKeHoachCells.map(cell => sheet?.[cell]?.v || '').filter(m => m);
                    const popArr = config.popCells.map(cell => sheet?.[cell]?.v || '').filter(p => p);
                    
                    // Thêm thông tin file vào mảng thông tin
                    fileInfos.files.push(file.name);
                    fileInfos.fileTypes.push(fileType);
                    fileInfos.pops = [...fileInfos.pops, ...popArr];
                    fileInfos.maKeHoachList = [...fileInfos.maKeHoachList, ...maKeHoachArr];

                    // Đọc dữ liệu hạng mục, số lượng, đơn giá
                    const { start, end, col } = config.hangMucRange;
                    
                    // Duyệt qua các dòng để lấy dữ liệu
                    for (let row = start; row <= end; row++) {
                        const hangMuc = sheet?.[`${col}${row}`]?.v;
                        
                        // Chỉ tiếp tục nếu có hạng mục
                        if (hangMuc) {
                            const donGia = sheet?.[`${config.donGiaCol}${row}`]?.v || 0;
                            
                            // Tạo dữ liệu cho từng mã kế hoạch và POP tương ứng
                            for (let i = 0; i < config.soLuongColumns.length && i < maKeHoachArr.length; i++) {
                                const soLuongCell = `${config.soLuongColumns[i]}${row}`;
                                const soLuong = sheet?.[soLuongCell]?.v || 0;
                                
                                // Chỉ thêm vào nếu số lượng > 0
                                if (soLuong > 0) {
                                    // Tính thành tiền bằng số lượng * đơn giá
                                    const thanhTien = soLuong * donGia;
                                    
                                    processedData.push({
                                        fileName: file.name,
                                        fileType: fileType,
                                        maKeHoach: maKeHoachArr[i],
                                        pop: popArr[i] || popArr[0], // Sử dụng POP tương ứng hoặc POP đầu tiên nếu không có
                                        hangMuc: hangMuc,
                                        donGia: donGia,
                                        soLuong: soLuong,
                                        thanhTien: thanhTien
                                    });
                                }
                            }
                        }
                    }
                    
                    completedFiles++;
                    
                    // Sau khi tất cả file đã được xử lý
                    if (completedFiles === files.length) {
                        setHsHcData(processedData);
                        setFileInfo({
                            files: fileInfos.files,
                            fileTypes: fileInfos.fileTypes,
                            pops: [...new Set(fileInfos.pops)], // Loại bỏ trùng lặp
                            maKeHoachList: [...new Set(fileInfos.maKeHoachList)] // Loại bỏ trùng lặp
                        });
                        
                        toast.update(toastId, {
                            render: `Đã đọc ${files.length} file Excel thành công. Tìm thấy ${processedData.length} mục.`,
                            type: "success",
                            isLoading: false,
                            autoClose: 3000
                        });
                        
                        setIsLoading(false);
                    }
                } catch (error) {
                    console.error(`Lỗi khi đọc file ${file.name}:`, error);
                    toast.update(toastId, {
                        render: `Đã xảy ra lỗi khi đọc file ${file.name}: ${error.message || 'Không xác định'}`,
                        type: "error",
                        isLoading: false,
                        autoClose: 3000
                    });
                    
                    completedFiles++;
                    if (completedFiles === files.length) {
                        setIsLoading(false);
                    }
                }
            };

            reader.onerror = () => {
                toast.error(`Đã xảy ra lỗi khi đọc file ${file.name}`);
                completedFiles++;
                if (completedFiles === files.length) {
                    setIsLoading(false);
                }
            };

            reader.readAsArrayBuffer(file);
        });
    };

    const sendDataToAppSheet = async () => {
        if (hsHcData.length === 0) {
            toast.info("Không có dữ liệu để gửi. Vui lòng tải lên file Excel.");
            return;
        }

        setIsLoading(true);
        const toastId = toast.loading("Đang gửi dữ liệu...");

        try {
            // Chuẩn bị dữ liệu cho API
            const rows = hsHcData.map(item => ({
                "Mã kế hoạch": item.maKeHoach,
                "POP": item.pop,
                "Hạng mục": item.hangMuc,
                "Đơn giá": item.donGia,
                "Số lượng": item.soLuong,
                "Thành tiền": item.thanhTien
            }));

            // Gửi dữ liệu đến AppSheet
            const response = await authUtils.apiRequestHSHC('DATA', 'Add', {}, { Rows: rows });

            if (!response || response.Failed) {
                throw new Error(`Lỗi khi thêm dữ liệu vào HSHC: ${response?.FailureMessage || 'Không xác định'}`);
            }

            toast.update(toastId, {
                render: `Đã thêm ${rows.length} mục vào bảng HSHC thành công!`,
                type: "success",
                isLoading: false,
                autoClose: 3000
            });
            
            // Reset form sau khi gửi thành công
            resetForm();
        } catch (error) {
            console.error("Lỗi khi gửi dữ liệu:", error);
            toast.update(toastId, {
                render: `Lỗi: ${error.message || 'Không xác định'}`,
                type: "error",
                isLoading: false,
                autoClose: 3000
            });
        } finally {
            setIsLoading(false);
        }
    };

    const resetForm = () => {
        setExcelFiles([]);
        setHsHcData([]);
        setFileInfo({
            files: [],
            fileTypes: [],
            pops: [],
            maKeHoachList: []
        });
        
        // Reset file input
        const fileInput = document.getElementById('excelFile');
        if (fileInput) fileInput.value = '';
    };

    const readFileAsBase64 = (file) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    };

    // Nhóm dữ liệu theo mã kế hoạch để hiển thị
    const groupedData = fileInfo.maKeHoachList.map(maKeHoach => {
        const items = hsHcData.filter(item => item.maKeHoach === maKeHoach);
        const pop = items.length > 0 ? items[0].pop : '';
        const total = items.reduce((sum, item) => sum + item.thanhTien, 0);
        
        return {
            maKeHoach,
            pop,
            items,
            total
        };
    }).filter(group => group.items.length > 0);

    return (
        <div className="bg-white p-4 rounded-md shadow">
            <ToastContainer position="bottom-right" autoClose={3000} hideProgressBar={false} />
            
            <div className="flex justify-between items-center mb-4">
                <h1 className="text-lg font-semibold text-gray-800">Form HSHC - Hồ Sơ Hoàn Công</h1>
                <button
                    onClick={resetForm}
                    className="px-3 py-1.5 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 flex items-center"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clipRule="evenodd" />
                    </svg>
                    Reset Form
                </button>
            </div>
            
            {/* Upload file section */}
            <div className="mb-4 bg-blue-50 p-3 rounded-md border border-blue-100">
                <div className="flex items-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <span className="font-medium text-blue-900">Tải lên file Excel HSHC (Có thể chọn nhiều file)</span>
                </div>

                <div className="flex flex-wrap items-center gap-2">
                    <input
                        className="flex-grow text-sm py-1.5 px-2 border border-gray-300 rounded-md bg-white"
                        type="file"
                        id="excelFile"
                        accept=".xlsx, .xls"
                        onChange={readExcelFile}
                        multiple
                    />

                    <button
                        type="button"
                        onClick={sendDataToAppSheet}
                        disabled={isLoading || hsHcData.length === 0}
                        className={`px-3 py-1.5 rounded-md text-white ${isLoading || hsHcData.length === 0 ? 'bg-blue-400' : 'bg-blue-600 hover:bg-blue-700'} flex items-center`}
                    >
                        {isLoading ? (
                            <>
                                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Đang xử lý...
                            </>
                        ) : (
                            <>Lưu dữ liệu</>
                        )}
                    </button>
                </div>
            </div>

            {/* Thông tin tổng quan */}
            {fileInfo.files.length > 0 && (
                <div className="mb-4 bg-gray-50 p-3 rounded-md border border-gray-200">
                    <h2 className="text-sm font-medium text-gray-700 mb-2">Thông tin tổng quan</h2>
                    <div className="grid grid-cols-2 gap-3">
                        <div>
                            <span className="text-xs text-gray-500">Số lượng file:</span>
                            <p className="font-medium text-blue-700">{fileInfo.files.length}</p>
                        </div>
                        <div>
                            <span className="text-xs text-gray-500">Loại file:</span>
                            <p className="font-medium text-blue-700">{[...new Set(fileInfo.fileTypes)].join(', ')}</p>
                        </div>
                        <div>
                            <span className="text-xs text-gray-500">POP:</span>
                            <p className="font-medium">{fileInfo.pops.join(', ')}</p>
                        </div>
                        <div>
                            <span className="text-xs text-gray-500">Mã kế hoạch:</span>
                            <p className="font-medium">{fileInfo.maKeHoachList.join(', ')}</p>
                        </div>
                        <div>
                            <span className="text-xs text-gray-500">Tổng số mục:</span>
                            <p className="font-medium">{hsHcData.length}</p>
                        </div>
                    </div>
                </div>
            )}

            {/* Danh sách file đã tải lên */}
            {fileInfo.files.length > 0 && (
                <div className="mb-4 bg-gray-50 p-3 rounded-md border border-gray-200">
                    <h2 className="text-sm font-medium text-gray-700 mb-2">Danh sách file ({fileInfo.files.length})</h2>
                    <ul className="text-sm">
                        {fileInfo.files.map((fileName, index) => (
                            <li key={index} className="flex items-center py-1">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-green-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <span>{fileName}</span>
                                <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full">
                                    {fileInfo.fileTypes[index]}
                                </span>
                            </li>
                        ))}
                    </ul>
                </div>
            )}

            {/* Hiển thị dữ liệu theo từng mã kế hoạch */}
            {groupedData.map((group, groupIndex) => (
                <div key={groupIndex} className="mb-6 border border-gray-200 rounded-md overflow-hidden">
                    <div className="bg-blue-50 p-3 flex justify-between items-center">
                        <div>
                            <h3 className="font-medium text-blue-800">Mã kế hoạch: {group.maKeHoach}</h3>
                            <p className="text-sm text-blue-600">POP: {group.pop}</p>
                        </div>
                        <div className="text-right">
                            <p className="text-sm text-blue-600">Số lượng mục: {group.items.length}</p>
                            <p className="font-medium text-blue-800">Tổng tiền: {group.total.toLocaleString()} đ</p>
                        </div>
                    </div>
                    
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead>
                                <tr className="bg-gray-100">
                                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">STT</th>
                                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">File</th>
                                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">Hạng mục</th>
                                    <th className="px-3 py-2 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">Đơn giá</th>
                                    <th className="px-3 py-2 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">Số lượng</th>
                                    <th className="px-3 py-2 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">Thành tiền</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {group.items.map((item, index) => (
                                    <tr key={index} className="hover:bg-gray-50">
                                        <td className="px-3 py-2 text-sm text-gray-900">{index + 1}</td>
                                        <td className="px-3 py-2 text-sm text-gray-900">{item.fileName}</td>
                                        <td className="px-3 py-2 text-sm text-gray-900">{item.hangMuc}</td>
                                        <td className="px-3 py-2 text-sm text-gray-900 text-right">{item.donGia.toLocaleString()}</td>
                                        <td className="px-3 py-2 text-sm text-gray-900 text-right">{item.soLuong.toLocaleString()}</td>
                                        <td className="px-3 py-2 text-sm text-gray-900 text-right">{item.thanhTien.toLocaleString()}</td>
                                    </tr>
                                ))}
                                <tr className="bg-gray-50 font-medium">
                                    <td colSpan="5" className="px-3 py-2 text-sm text-gray-900 text-right">Tổng cộng:</td>
                                    <td className="px-3 py-2 text-sm text-gray-900 text-right">{group.total.toLocaleString()}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            ))}
        </div>
    );
};

export default HSHCForm;